#!/bin/bash
set -euo pipefail

echo "Env variables at container start:"
env | grep DATABASE_URL || echo "DATABASE_URL not found"

# Detect Rails server startup
if [[ "$*" == *"rails server"* ]] || [[ "$*" == *"bundle exec rails server"* ]] || [[ "$*" == *"bundle exec puma"* ]]; then
  echo "Rails server detected. Running pre-startup tasks..."

  if [ -z "${DATABASE_URL:-}" ]; then
    echo "ERROR: DATABASE_URL is not set" >&2
    exit 1
  fi

  # Use Ruby to safely parse DATABASE_URL
  eval "$(ruby << 'EOF'
require 'uri'
require 'shellwords'

begin
  uri = URI(ENV['DATABASE_URL'])

  host = uri.host
  port = uri.port || 5432
  user = uri.user
  password = uri.password
  dbname = uri.path&.sub(/^\//, '') || 'postgres'

  # Shell-escape each value to prevent injection
  puts "DB_HOST=#{Shellwords.escape(host)}"
  puts "DB_PORT=#{Shellwords.escape(port.to_s)}"
  puts "DB_USER=#{Shellwords.escape(user)}"
  puts "export PGPASSWORD=#{Shellwords.escape(password).inspect}"
  puts "DB_NAME=#{Shellwords.escape(dbname)}"
rescue => e
  $stderr.puts "Failed to parse DATABASE_URL: #{e.message}"
  exit 1
end
EOF
)"

  # Now wait for DB
  echo "Waiting for PostgreSQL to be reachable at $DB_HOST:$DB_PORT..."
  until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" --timeout=10 > /dev/null 2>&1; do
    echo "Database not reachable yet, retrying in 2s..."
    sleep 2
  done
  echo "PostgreSQL is reachable."

  # Wait for ActiveRecord
  echo "Waiting for ActiveRecord to establish DB connection..."
  until bundle exec rails runner "ActiveRecord::Base.connection.execute('SELECT 1')" > /dev/null 2>&1; do
    echo "ActiveRecord connection failed, waiting 2s..."
    sleep 2
  done
  echo "ActiveRecord connected successfully."

  # Run migrations
  echo "Running database migrations..."
  bundle exec rails db:migrate
  echo "Migrations completed successfully."

  # Create missing sequences for all organizations
  echo "Ensuring problem sequences exist..."
  bundle exec rails runner "
    begin
      Organization.find_each do |org|
        sequence_name = \"tickets_prb_organization_#{org.id}_seq\"
        unless ActiveRecord::Base.connection.execute(\"SELECT 1 FROM information_schema.sequences WHERE sequence_name = '#{sequence_name}'\").any?
          ActiveRecord::Base.connection.execute(\"CREATE SEQUENCE #{sequence_name} START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\")
          puts \"Created sequence: #{sequence_name}\"
        else
          puts \"Sequence already exists: #{sequence_name}\"
        end
      end
      puts 'All sequences verified/created successfully.'
    rescue => e
      puts \"Error creating sequences: #{e.message}\"
      puts 'Continuing with server startup...'
    end
  " 2>/dev/null || echo "Sequence creation failed, but continuing..."

  echo "Pre-startup tasks completed. Starting Rails server..."
fi

# Execute the main command
exec "$@"